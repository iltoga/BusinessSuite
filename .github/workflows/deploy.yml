name: Deploy BusinessSuite to VPS using SSH and GitHub Actions

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-businesssuite
      cancel-in-progress: true
    env:
      DOCKER_BUILDKIT: 1

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 30m
          command_timeout: 30m
          script: |
            set -e
            REPO_DIR="${{ secrets.REPO_DIR }}"

            # Making space for new deployment
            docker system prune -f

            echo "🚀  Starting deployment …"
            echo "📁  Repository directory: $REPO_DIR"

            if [ ! -d "$REPO_DIR" ]; then
              echo "❌  Repository directory does not exist, aborting."
              exit 1
            fi

            cd "$REPO_DIR"
            echo "📂  Working directory: $(pwd)"

            echo "🔗  Ensuring correct Git remote …"
            git remote set-url origin git@github.com-deploy-businesssuite:iltoga/BusinessSuite.git

            OLD_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo none)
            echo "📊  Current commit: $OLD_COMMIT"

            echo "📥  Fetching latest changes …"
            git fetch --all

            echo "🔄  Switching to main branch …"
            git checkout main

            echo "🐳  Ensuring no Docker containers are interfering..."
            docker compose down --remove-orphans || echo "⚠️  No containers to stop"

            echo "🧹  Resetting local state …"
            git reset --hard origin/main

            # Safely clean only untracked files that won't interfere with operations
            echo "🧹  Cleaning safe untracked files..."
            git clean -f || echo "⚠️  Some files couldn't be cleaned, continuing..."

            echo "⬇️  Pulling latest commits …"
            git pull origin main

            NEW_COMMIT=$(git rev-parse HEAD)
            echo "📊  New commit: $NEW_COMMIT"

            echo "🔍  Detecting dependency-file changes …"
            DEP_CHANGED=false
            if [ "$OLD_COMMIT" != none ] && [ "$OLD_COMMIT" != "$NEW_COMMIT" ]; then
              if git diff --name-only $OLD_COMMIT $NEW_COMMIT | grep -E '(pyproject\.toml|requirements\.txt|Dockerfile)' >/dev/null; then
                DEP_CHANGED=true
                echo "📦  Dependencies or Dockerfile changed — full rebuild needed."
              else
                echo "📦  No dependency/Dockerfile change — cached dependencies will be reused."
              fi
            fi

            echo "⚙️  Exporting environment variables from .env …"
            if [ -f .env ]; then
              set -a
              source .env
              set +a
              echo "✅  .env variables loaded."
            else
              echo "❌  .env not found, aborting."
              exit 1
            fi

            export GIT_COMMIT_SHA="$NEW_COMMIT"
            export DOCKER_BUILDKIT=1
            export COMPOSE_DOCKER_CLI_BUILD=1

            echo "🛠️  Building and starting containers …"
            if [ "$DEP_CHANGED" = true ]; then
              docker compose build --pull
            fi
            docker compose up -d --remove-orphans

            echo "🧹  Cleaning up unused data …"
            docker system prune -f
